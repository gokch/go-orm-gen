package config

import (
	"fmt"
	"strings"

	"ariga.io/atlas/sql/schema"
)

type Queries struct {
	schema *Schema             `json:"-"`
	Custom map[string][]*Query `json:"custom"` // user defined - not overwritten by schema
	Tables map[string][]*Query `json:"tables"` // auto generated by schema
}

func (t *Queries) init(schema *Schema) {
	t.schema = schema
	t.Custom = make(map[string][]*Query)
	t.Tables = make(map[string][]*Query)
}

func (t *Queries) InitQueryTables() error {
	for _, table := range t.schema.Tables {
		err := t.initQueryTable(table)
		if err != nil {
			return err
		}
	}
	return nil
}

func (t *Queries) initQueryTable(table *schema.Table) error {
	// insert all
	questionare := strings.Repeat("?, ", len(table.Columns))
	questionare = questionare[:len(questionare)-2]
	t.AddQueryTables(table.Name, &Query{
		Name:    "insert",
		Comment: "default query - insert all",
		Sql:     fmt.Sprintf("INSERT INTO %s VALUES (%s)", table.Name, questionare),
	})

	// select all
	t.AddQueryTables(table.Name, &Query{
		Name:    "select",
		Comment: "default query - select all",
		Sql:     fmt.Sprintf("SELECT * FROM %s", table.Name),
	})

	// TODO: select where by index

	// TODO: update

	// delete
	t.AddQueryTables(table.Name, &Query{
		Name:    "delete",
		Comment: "default query - delete all",
		Sql:     fmt.Sprintf("DELETE FROM %s", table.Name),
	})

	return nil
}

func (t *Queries) AddQueryTables(tableName string, query *Query) {
	query.Schema = t.schema
	if t.Tables == nil {
		t.Tables = make(map[string][]*Query, 10)
	}
	if _, ok := t.Tables[tableName]; ok == false {
		t.Tables[tableName] = make([]*Query, 0, 10)
	}
	t.Tables[tableName] = append(t.Tables[tableName], query)
}

func (t *Queries) AddQueryCustom(groupName string, query *Query) {
	query.Schema = t.schema
	if t.Custom == nil {
		t.Custom = make(map[string][]*Query, 10)
	}
	if _, ok := t.Custom[query.Name]; ok == false {
		t.Custom[query.Name] = make([]*Query, 0, 10)
	}

	t.Custom[groupName] = append(t.Custom[groupName], query)
}

//------------------------------------------------------------------------------------------------//
// query

type Query struct {
	Name    string  `json:"name"`
	Comment string  `json:"comment,omitempty"`
	Sql     string  `json:"sql"`
	Schema  *Schema `json:"-"` // 쿼리 제작을 위한 전체 스키마 정보

	// options
	CustomFieldTypes []*CustomFieldType `json:"custom_field_types,omitempty"`
	InsertMulti      bool               `json:"insert_multi,omitempty"`
	UpdateNullIgnore bool               `json:"update_null_ignore,omitempty"`
	ErrQuery         string             `json:"-"`
	ErrParser        string             `json:"-"`
}

type CustomFieldType struct {
	TableName  string `json:"table_name"`
	FieldName  string `json:"field_name"`
	CustomType string `json:"type"`
}

//------------------------------------------------------------------------------------------------//
// query

func (t *Query) Init(name, sql string) {
	t.Name = name
	t.Sql = sql
	t.CustomFieldTypes = make([]*CustomFieldType, 0, 10)
}

func (t *Query) AddCustomType(tableName, fieldName string, customType string) {
	if t.CustomFieldTypes == nil {
		t.CustomFieldTypes = make([]*CustomFieldType, 0, 10)
	}
	t.CustomFieldTypes = append(t.CustomFieldTypes, &CustomFieldType{
		TableName:  tableName,
		FieldName:  fieldName,
		CustomType: customType,
	})
}

func (t *Query) GetCustomType(fieldName string) (genType string) {
	for _, pt := range t.CustomFieldTypes {
		if pt.FieldName == fieldName {
			return pt.CustomType
		}
	}
	return ""
}
