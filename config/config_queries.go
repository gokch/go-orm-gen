package config

type Queries struct {
	Default map[string][]*Query // auto generated by schema
	Custom  []*Query            // user defined - not overwritten by schema
}

func (t *Queries) AddQuery(query *Query) {

}

//------------------------------------------------------------------------------------------------//
// query

type Query struct {
	Name    string `json:"name"`
	Comment string `json:"comment,omitempty"`

	Sql string `json:"sql"`

	SelectFieldTypes []*SelectFieldType `json:"fields,omitempty"`
	InsertMulti      bool               `json:"insert_multi,omitempty"`
	UpdateNullIgnore bool               `json:"update_null_ignore,omitempty"`

	ErrQuery  string `json:"-"`
	ErrParser string `json:"-"`
}

// select 만 field type이 있는 이유
// select query 는 bp.json 의 schema type 을 통해 타입을 지정할 수 없기 때문에
// 직접 쿼리를 select 를 하고 결과를 추출해 타입에 넣음
// snum, uint 등의 custom type 은 여기서 처리
type SelectFieldType struct {
	Name    string `json:"name"`
	TypeGen string `json:"type"`
}

//------------------------------------------------------------------------------------------------//
// query

func (t *Query) Init(name, sql string) {
	t.Name = name
	t.Sql = sql
	t.SelectFieldTypes = make([]*SelectFieldType, 0, 10)
}

func (t *Query) AddFieldType(name string, typeGen string) {
	if t.SelectFieldTypes == nil {
		t.SelectFieldTypes = make([]*SelectFieldType, 0, 10)
	}
	t.SelectFieldTypes = append(t.SelectFieldTypes, &SelectFieldType{
		Name:    name,
		TypeGen: typeGen,
	})
}

func (t *Query) GetFieldType(name string) (genType string) {
	for _, pt := range t.SelectFieldTypes {
		if pt.Name == name {
			return pt.TypeGen
		}
	}
	return ""
}
