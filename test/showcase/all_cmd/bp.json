{
	"base_info": {
		"TD_n4_version": 1
	},
	"gen": {
		"lang": [
			{
				"lang_name": "go",
				"import": [
					{
						"name": "",
						"path": "fmt"
					},
					{
						"name": ".",
						"path": "module/db"
					},
					{
						"name": "",
						"path": "strings"
					}
				]
			}
		],
		"field_type": [
			{
				"type_name_bp": "bt",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "[]byte"
					}
				]
			},
			{
				"type_name_bp": "is",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "bool"
					}
				]
			},
			{
				"type_name_bp": "s",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "string"
					}
				]
			},
			{
				"type_name_bp": "n1",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int8"
					}
				]
			},
			{
				"type_name_bp": "n2",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int16"
					}
				]
			},
			{
				"type_name_bp": "n4",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int32"
					}
				]
			},
			{
				"type_name_bp": "n8",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int64"
					}
				]
			},
			{
				"type_name_bp": "n8",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int64"
					}
				]
			},
			{
				"type_name_bp": "u1",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint8"
					}
				]
			},
			{
				"type_name_bp": "u2",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint16"
					}
				]
			},
			{
				"type_name_bp": "u4",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint32"
					}
				]
			},
			{
				"type_name_bp": "u8",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint64"
					}
				]
			},
			{
				"type_name_bp": "f",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "float32"
					}
				]
			},
			{
				"type_name_bp": "d",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "float64"
					}
				]
			},
			{
				"type_name_bp": "snum",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "T_Col__snum"
					}
				]
			}
		]
	},
	"db": {
		"schema": {
			"tables": [
				{
					"table_name": "test_table",
					"fields": [
						{
							"name": "u8_seq",
							"type_db": "bigint(20) UNSIGNED",
							"type_bp": "u8"
						},
						{
							"name": "is_bool",
							"type_db": "tinyint(4)",
							"type_bp": "is"
						},
						{
							"name": "s_str",
							"type_db": "varchar(100) COLLATE utf8mb3_bin",
							"type_bp": "s"
						},
						{
							"name": "bt_bin",
							"type_db": "varbinary(128) BINARY",
							"type_bp": "bt"
						},
						{
							"name": "n1_num",
							"type_db": "tinyint(4)",
							"type_bp": "n1"
						},
						{
							"name": "n2_num",
							"type_db": "smallint(6)",
							"type_bp": "n2"
						},
						{
							"name": "n4_num",
							"type_db": "int(11)",
							"type_bp": "n4"
						},
						{
							"name": "n8_num",
							"type_db": "bigint(20)",
							"type_bp": "n8"
						},
						{
							"name": "u1_num",
							"type_db": "tinyint(3) UNSIGNED",
							"type_bp": "u1"
						},
						{
							"name": "u2_num",
							"type_db": "smallint(5) UNSIGNED",
							"type_bp": "u2"
						},
						{
							"name": "u4_num",
							"type_db": "int(10) UNSIGNED",
							"type_bp": "u4"
						},
						{
							"name": "u8_num",
							"type_db": "bigint(20) UNSIGNED",
							"type_bp": "u8"
						},
						{
							"name": "f4_num",
							"type_db": "float",
							"type_bp": "f"
						},
						{
							"name": "f8_num",
							"type_db": "double",
							"type_bp": "d"
						},
						{
							"name": "bt_snum",
							"type_db": "varbinary(66) BINARY",
							"type_bp": "snum"
						}
					],
					"indexs": [
						{
							"name": "",
							"type": "PRIMARY KEY",
							"keys": [
								"u8_seq"
							]
						}
					]
				}
			]
		},
		"caller": {
			"group": [
				{
					"group_name": "common",
					"querys": [
						{
							"name": "arg",
							"comment": "인자 사용 예제",
							"sql": "select * from test_table where u8_seq = %u8_seq%"
						},
						{
							"name": "arg__limit_one",
							"comment": "단일 값 반환 예제 ( limit 1 일 경우 )",
							"sql": "select * from test_table where u8_seq = %u8_seq% limit 1"
						},
						{
							"name": "tpl",
							"comment": "템플릿 사용 예제 ( 테이블 )",
							"sql": "insert into #table_name/test_table# (s_str, n1_num) values(%s_str%, %n1_num%)"
						}
					]
				},
				{
					"group_name": "select",
					"querys": [
						{
							"name": "group_by__limit__offset",
							"comment": "group by / limit / offset 사용 예제",
							"sql": "select * from test_table where u8_seq = %u8_seq% group by %group_by% limit %limit% offset %offset%"
						},
						{
							"name": "tpl",
							"comment": "select 템플릿 사용 예제 ( 반환 구조체 타입을 알아야 하기 때문에 실제 스키마 입력이 필요 )",
							"sql": "select * from #table_name/test_table#"
						},
						{
							"name": "custom_field",
							"comment": "커스텀 필드 타입 사용 예제",
							"sql": "select * from test_table",
							"select_field_type": [
								{
									"name": "u8_seq",
									"type": "u8"
								},
								{
									"name": "is_bool",
									"type": "is"
								},
								{
									"name": "u1_num",
									"type": "u1"
								},
								{
									"name": "u2_num",
									"type": "u2"
								},
								{
									"name": "u4_num",
									"type": "u4"
								},
								{
									"name": "u8_num",
									"type": "u8"
								},
								{
									"name": "bt_snum",
									"type": "snum"
								}
							]
						}
					]
				},
				{
					"group_name": "insert",
					"querys": [
						{
							"name": "auto_increment",
							"comment": "auto increment 예제",
							"sql": "insert into test_table values(NULL, %is_bool%, %s_str%, %bt_bin%, %n1_num%, %n2_num%, %n4_num%, %n8_num%, %u1_num%, %u2_num%, %u4_num%, %u8_num%, %f4_num%, %f8_num%, %bt_snum%)"
						},
						{
							"name": "multi_insert",
							"comment": "multi insert 예제",
							"sql": "insert into test_table (u8_seq, is_bool, s_str, n1_num) values(NULL, %is_bool%, %s_str%, %n1_num%)",
							"insert__multi": true
						}
					]
				},
				{
					"group_name": "update",
					"querys": [
						{
							"name": "add",
							"comment": "set 사칙연산 예제",
							"sql": "update test_table set u8_num = %u8_num% + u8_num where u8_seq = %u8_seq%"
						},
						{
							"name": "null_ignore",
							"comment": "null ignore 예제",
							"sql": "update test_table set is_bool = %is_bool%, s_str = %s_str%, u1_num = %u1_num% where u8_seq = %u8_seq%",
							"update__null_ignore": true
						}
					]
				},
				{
					"group_name": "delete",
					"querys": []
				}
			]
		}
	}
}