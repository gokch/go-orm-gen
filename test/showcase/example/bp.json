{
	"base_info": {
		"TD_n4_version": 1
	},
	"gen": {
		"lang": [
			{
				"lang_name": "go",
				"import": [
					{
						"name": "",
						"path": "fmt"
					},
					{
						"name": ".",
						"path": "module/db"
					},
					{
						"name": "",
						"path": "strings"
					}
				]
			}
		],
		"field_type": [
			{
				"type_name_bp": "bt",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "[]byte"
					}
				]
			},
			{
				"type_name_bp": "s",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "string"
					}
				]
			},
			{
				"type_name_bp": "n1",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int8"
					}
				]
			},
			{
				"type_name_bp": "n2",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int16"
					}
				]
			},
			{
				"type_name_bp": "n4",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int32"
					}
				]
			},
			{
				"type_name_bp": "n8",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int64"
					}
				]
			},
			{
				"type_name_bp": "n8",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "int64"
					}
				]
			},
			{
				"type_name_bp": "u1",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint8"
					}
				]
			},
			{
				"type_name_bp": "u2",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint16"
					}
				]
			},
			{
				"type_name_bp": "u4",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint32"
					}
				]
			},
			{
				"type_name_bp": "u8",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "uint64"
					}
				]
			},
			{
				"type_name_bp": "f",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "float32"
					}
				]
			},
			{
				"type_name_bp": "d",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "float64"
					}
				]
			},
			{
				"type_name_bp": "snum",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "T_Col__snum"
					}
				]
			},
			{
				"type_name_bp": "dtn",
				"lang_type": [
					{
						"lang_name": "go",
						"type_name": "T_Col__dtn"
					}
				]
			}
		]
	},
	"db": {
		"schema": {
			"tables": [
				{
					"table_name": "bp_gen_test_schema",
					"fields": [
						{
							"name": "u8_seq",
							"type_db": "bigint(20) UNSIGNED",
							"type_bp": "u8"
						},
						{
							"name": "is_bool",
							"type_db": "tinyint(4)",
							"type_bp": "n1"
						},
						{
							"name": "s_str",
							"type_db": "varchar(100) COLLATE utf8mb3_bin",
							"type_bp": "s"
						},
						{
							"name": "n1_num",
							"type_db": "tinyint(4)",
							"type_bp": "n1"
						},
						{
							"name": "n2_num",
							"type_db": "smallint(6)",
							"type_bp": "n2"
						},
						{
							"name": "n4_num",
							"type_db": "int(11)",
							"type_bp": "n4"
						},
						{
							"name": "n8_num",
							"type_db": "bigint(20)",
							"type_bp": "n8"
						},
						{
							"name": "u1_num",
							"type_db": "tinyint(3) UNSIGNED",
							"type_bp": "u1"
						},
						{
							"name": "u2_num",
							"type_db": "smallint(5) UNSIGNED",
							"type_bp": "u2"
						},
						{
							"name": "u4_num",
							"type_db": "int(10) UNSIGNED",
							"type_bp": "u4"
						},
						{
							"name": "u8_num",
							"type_db": "bigint(20) UNSIGNED",
							"type_bp": "u8"
						},
						{
							"name": "bt_bin",
							"type_db": "varbinary(128) BINARY",
							"type_bp": "bt"
						},
						{
							"name": "sn_snum",
							"type_db": "longblob BINARY",
							"type_bp": "snum"
						},
						{
							"name": "f_num",
							"type_db": "float",
							"type_bp": "f"
						},
						{
							"name": "d_num",
							"type_db": "double",
							"type_bp": "d"
						},
						{
							"name": "js_str",
							"type_db": "longtext COLLATE utf8mb3_bin",
							"type_bp": "s"
						},
						{
							"name": "dt_time",
							"type_db": "int(11) UNSIGNED",
							"type_bp": "u4"
						},
						{
							"name": "dtn_time",
							"type_db": "bigint(20) UNSIGNED",
							"type_bp": "dtn"
						}
					],
					"indexs": [
						{
							"name": "",
							"type": "PRIMARY KEY",
							"keys": [
								"u8_seq"
							]
						}
					]
				}
			]
		},
		"caller": {
			"group": [
				{
					"group_name": "select",
					"querys": [
						{
							"name": "one",
							"sql": "select u8_seq from bp_gen_test_schema",
							"select_field_type": [
								{
									"name": "u8_seq",
									"type": "u8"
								}
							]
						},
						{
							"name": "all",
							"sql": "select * from bp_gen_test_schema",
							"select_field_type": [
								{
									"name": "sn_snum",
									"type": "snum"
								},
								{
									"name": "u8_seq",
									"type": "u8"
								},
								{
									"name": "u1_num",
									"type": "u1"
								},
								{
									"name": "u2_num",
									"type": "u2"
								},
								{
									"name": "u4_num",
									"type": "u4"
								},
								{
									"name": "u8_num",
									"type": "u8"
								},
								{
									"name": "dtn_time",
									"type": "dtn"
								}
							]
						},
						{
							"name": "tpl__ret_single",
							"sql": "select u8_seq,is_bool,s_str,n1_num,n2_num,n4_num,n8_num,bt_bin,sn_snum,f_num,d_num,js_str,dt_time,dtn_time from #t1_select/bp_gen_test_schema# where u8_seq=1 or is_bool=0 limit 1",
							"select_field_type": [
								{
									"name": "sn_snum",
									"type": "snum"
								},
								{
									"name": "u8_seq",
									"type": "u8"
								},
								{
									"name": "u1_num",
									"type": "u1"
								},
								{
									"name": "u2_num",
									"type": "u2"
								},
								{
									"name": "u4_num",
									"type": "u4"
								},
								{
									"name": "u8_num",
									"type": "u8"
								},
								{
									"name": "dtn_time",
									"type": "dtn"
								}
							]
						},
						{
							"name": "where_arg",
							"sql": "select u8_seq,is_bool from bp_gen_test_schema where u8_seq=%seq% and is_bool=%bool% limit 1 offset 4",
							"select_field_type": [
								{
									"name": "u8_seq",
									"type": "u8"
								}
							]
						},
						{
							"name": "where_arg__snum",
							"sql": "select sn_snum from #table_name/bp_gen_test_schema# order by sn_snum",
							"select_field_type": [
								{
									"name": "sn_snum",
									"type": "snum"
								}
							]
						},
						{
							"name": "tpl__n__arg",
							"sql": "select u8_seq,is_bool from #table_name/bp_gen_test_schema# where u8_seq\u003e%seq% or is_bool=%bool%",
							"select_field_type": [
								{
									"name": "u8_seq",
									"type": "u8"
								}
							]
						},
						{
							"name": "where_arg__group_by",
							"sql": "select * from bp_gen_test_schema where u8_seq=%u8_seq% or is_bool=%is_bool% group by %u8_seq__group_by%",
							"select_field_type": [
								{
									"name": "sn_snum",
									"type": "snum"
								},
								{
									"name": "u8_seq",
									"type": "u8"
								},
								{
									"name": "u1_num",
									"type": "u1"
								},
								{
									"name": "u2_num",
									"type": "u2"
								},
								{
									"name": "u4_num",
									"type": "u4"
								},
								{
									"name": "u8_num",
									"type": "u8"
								},
								{
									"name": "dtn_time",
									"type": "dtn"
								}
							]
						}
					]
				},
				{
					"group_name": "insert",
					"querys": [
						{
							"name": "arg__field_name_all",
							"sql": "insert into bp_gen_test_schema (u8_seq,is_bool,s_str,n1_num,n2_num,n4_num,n8_num,u1_num,u2_num,u4_num,u8_num,bt_bin,sn_snum,f_num,d_num,js_str,dt_time,dtn_time) values (0, 0, %s_str%, 0, 1, 2, 3, 0, 1, 2, 3, %bt_bin%, %sn_snum%, 1.0, 1.233, %js_str%, 176653424, 43223545)"
						},
						{
							"name": "tpl__field_name_all__arg",
							"sql": "insert into #bp_gen_test_schema# (#u8_seq#,is_bool,s_str,n1_num,n2_num,n4_num,n8_num,bt_bin,sn_snum,f_num,d_num,js_str,dt_time,dtn_time) values (%u8_seq%, %is_bool%, %s_str%, %n1_num%, %n2_num%, %n4_num%, %n8_num%, %bt_bin%, %sn_snum%, %f_num%, %d_num%, %js_str%, %dt_time%, %dtn_time%)"
						},
						{
							"name": "arg__field_star",
							"sql": "insert into bp_gen_test_schema values (%u8_seq%, %is_bool%, %s_str%, %n1_num%, %n2_num%, %n4_num%, %n8_num%, %u1_num%, %u2_num%, %u4_num%, %u8_num%, %bt_bin%, %sn_snum%, %f_num%, %d_num%, %js_str%, %dt_time%, %dtn_time%)"
						},
						{
							"name": "arg__field_one__use_set_keyword",
							"sql": "insert into bp_gen_test_schema set u8_seq = %u8_seq%"
						},
						{
							"name": "all_field__multi_insert",
							"sql": "insert into bp_gen_test_schema values (%u8_seq%, %is_bool%, %s_str%, %n1_num%, %n2_num%, %n4_num%, %n8_num%, %u1_num%, %u2_num%, %u4_num%, %u8_num%, %bt_bin%, %sn_snum%, %f_num%, %d_num%, %js_str%, %dt_time%, %dtn_time%)",
							"insert__multi": true
						},
						{
							"name": "tpl__all_field__multi_insert",
							"sql": "insert into #t1_update/bp_gen_test_schema# values (%u8_seq%, %is_bool%, %s_str%, %n1_num%, %n2_num%, %n4_num%, %n8_num%, %u1_num%, %u2_num%, %u4_num%, %u8_num%, %bt_bin%, %sn_snum%, %f_num%, %d_num%, %js_str%, %dt_time%, %dtn_time%)",
							"insert__multi": true
						},
						{
							"name": "tpl__all_field__seq_null__multi_insert",
							"sql": "insert into #t1_update/bp_gen_test_schema# values (NULL, %is_bool%, %s_str%, %n1_num%, %n2_num%, %n4_num%, %n8_num%, %u1_num%, %u2_num%, %u4_num%, %u8_num%, %bt_bin%, %sn_snum%, %f_num%, %d_num%, %js_str%, %dt_time%, %dtn_time%)",
							"insert__multi": true
						},
						{
							"name": "tpl__snum",
							"sql": "insert into #t1_update/bp_gen_test_schema# (sn_snum) values (%sn_snum%)"
						},
						{
							"name": "tpl__snum__multi_insert",
							"sql": "insert into #t1_update/bp_gen_test_schema# (sn_snum) values (%sn_snum%)",
							"insert__multi": true
						}
					]
				},
				{
					"group_name": "update",
					"querys": [
						{
							"name": "arg",
							"sql": "update bp_gen_test_schema set is_bool = %is_bool%, s_str = %s_str% where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__arg",
							"sql": "update #t1_update/bp_gen_test_schema# set is_bool = %is_bool%, s_str = %s_str% where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__arg__without_null",
							"sql": "update #t1_update/bp_gen_test_schema# set u1_num = %u1_num%, is_bool = %is_bool%, s_str = %s_str% where u8_seq = %u8_seq%",
							"update__null_ignore": true
						},
						{
							"name": "tpl__add__1",
							"sql": "update #t1_update/bp_gen_test_schema# set u8_num = u8_num + 1 where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__arg__add__left",
							"sql": "update #t1_update/bp_gen_test_schema# set u8_num = %u8_num% + u8_num where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__arg__add__right",
							"sql": "update #t1_update/bp_gen_test_schema# set u8_num = u8_num + %u8_num% where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__arg__add__both",
							"sql": "update #t1_update/bp_gen_test_schema# set u8_num = u8_num + %u8_num%, u4_num = %u4_num% + u8_num where u8_seq = %u8_seq%"
						}
					]
				},
				{
					"group_name": "delete",
					"querys": [
						{
							"name": "arg",
							"sql": "delete from bp_gen_test_schema where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__arg",
							"sql": "delete from #t1_delete/bp_gen_test_schema# where u8_seq = %u8_seq%"
						},
						{
							"name": "tpl__all",
							"sql": "delete from #t1_delete/bp_gen_test_schema#"
						}
					]
				}
			]
		}
	}
}